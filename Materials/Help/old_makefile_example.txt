# -*- MakeFile -*-

sysdb: cMain.o cApp.o DBMS-Functions-Classes.o
	g++ -pipe cMain.o cApp.o DBMS-Functions-Classes.o `wx-config --libs` -o sysdb

cMain.o: cMain.cpp
	g++ -pipe -c cMain.cpp `wx-config --cxxflags`

cApp.o: cApp.cpp
	g++ -pipe -c cApp.cpp `wx-config --cxxflags`

DBMS-Functions-Classes.o: DBMS-Functions-Classes.cpp
	g++ -pipe -c DBMS-Functions-Classes.cpp `wx-config --cxxflags`

clean:
	rm *.o sysdb
	
=============================================================================

NOTES: 

    ============================================================================

    - The two wx-config lines can be combined into
        
        `wx-config --cxxflags --libs`
        
    ============================================================================      
        
    - The wxWidgets install guide shows this for building an app made with it:
    
        g++ widgetTest.cpp `wx-config --cxxflags --libs` -o widgetTest
        
    ============================================================================
  
    - Some more crumbs of info from the wxWidgets installation guide:
    
        If your code uses OpenGL, you need to use 
        `wx-config --cxxflags --libs --gl-libs` 
        to include the additional libraries. 

        ------------------------------------------------------------------------

        In a bigger project compiling and linking will most likely be 
        two different steps (and probably using a makefile)
      
        ------------------------------------------------------------------------
      
        If when running a wxWidgets app you get an error like:

        ./a.out: error while loading shared libraries: libwx_baseu-3.0.so.0: 
        cannot open shared object file: No such file or directory

        this means your system does not search for libs in /usr/local/libs 
        (or wherever you installed wxWidgets) by default. 

        To solve this, any of the following should work :

        Write export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib on the 
        terminal before opening the executable (from the same terminal). 
        
        To save having to do this each time, add that line to your 
        ~/.bashrc or similar.
        
        Give a --rpath /usr/local/lib/ flag to the linker while building 
        (tip: since you generally don't invoke the linker directly, but 
        rather perform linking through GCC, use GCC's syntax to pass along flags
         to the linker : -Wl,--rpath,/usr/local/lib/)
         
        Become root and execute /sbin/ldconfig /usr/local/lib. 
        This will configure dynamic linker runtime bindings, 
        adding all the libraries in /usr/local/lib, 
        so it's not really a very good idea!
          

